/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2019-04-19 11:38:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.test;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class testAjaxPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>first Ajax</title>\r\n");
      out.write("<!-- 상대경로 사용 -->\r\n");
      out.write("<!-- <script type=\"text/javascript\" src=\"../../../resources/js/jquery-3.3.1.min.js\"></script> -->\r\n");
      out.write("<!-- 절대경로 사용 -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/jquery-3.3.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$(\"#test1\").on(\"click\", function(){\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"test1.do\",\r\n");
      out.write("\t\t\tdata: { name: \"박혁거세\", age: 33},\r\n");
      out.write("\t\t\ttype: \"post\",\r\n");
      out.write("\t\t\tsuccess: function(result){\r\n");
      out.write("\t\t\t\tif(result == \"ok\"){\r\n");
      out.write("\t\t\t\t\talert(\"전송 성공!\");\r\n");
      out.write("\t\t\t\t\tconsole.log(\"result : \" + result);\r\n");
      out.write("\t\t\t\t\t$(\"#d1\").html(\"<h1>\" + result + \"</h1>\");\r\n");
      out.write("\t\t\t\t}else {\r\n");
      out.write("\t\t\t\t\talert(\"전송 실패!!!\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror: function(request, status, errorData){\r\n");
      out.write("\t\t\t\tconsole.log(\"error code : \" + request.status\r\n");
      out.write("\t\t\t\t\t\t+\"\\nmessage : \" + request.responseText\r\n");
      out.write("\t\t\t\t\t\t+\"\\nerror : \" + errorData);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#test2\").on(\"click\", function(){\r\n");
      out.write("\t\t//test2.do 로부터 json 객체를 리턴받아, div에 출력\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"test2.do\",\r\n");
      out.write("\t\t\ttype: \"post\",\r\n");
      out.write("\t\t\tdataType: \"json\",\r\n");
      out.write("\t\t\tsuccess: function(jsonData){\r\n");
      out.write("\t\t\t\tconsole.log(\"jsonData : \" + jsonData);\r\n");
      out.write("\t\t\t\t$(\"#d2\").html(\"번호 : \" + jsonData.no + \"<br>제목 : \" + decodeURIComponent(jsonData.title.replace(/\\+/g, \" \")) +\r\n");
      out.write("\t\t\t\t\t\t\"<br>작성자 : \" + jsonData.writer + \r\n");
      out.write("\t\t\t\t\t\t\"<br>내용 : \" + decodeURIComponent(jsonData.content.replace(/\\+/g, \" \")));\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror: function(request, status, errorData){\r\n");
      out.write("\t\t\t\tconsole.log(\"error code : \" + request.status\r\n");
      out.write("\t\t\t\t\t\t+\"\\nmessage : \" + request.responseText\r\n");
      out.write("\t\t\t\t\t\t+\"\\nerror : \" + errorData);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#test3\").on(\"click\", function(){\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"test3.do\",\r\n");
      out.write("\t\t\ttype: \"post\",\r\n");
      out.write("\t\t\tdataType: \"json\",\r\n");
      out.write("\t\t\tsuccess: function(obj){\r\n");
      out.write("\t\t\t\tconsole.log(\"obj : \" + obj);   //object 라고 출력\r\n");
      out.write("\t\t\t\t//배열을 가진 json 객체를 문자열로 변환 처리\r\n");
      out.write("\t\t\t\tvar objStr = JSON.stringify(obj);\r\n");
      out.write("\t\t\t\t//문자열을 json 객체로 변환\r\n");
      out.write("\t\t\t\tvar jsonObj = JSON.parse(objStr);\r\n");
      out.write("\t\t\t\t//출력용 문자열 준비\r\n");
      out.write("\t\t\t\tvar outValues = $(\"d3\").html();\r\n");
      out.write("\t\t\t\t//jsonObj 안의 배열에 대한 반복 처리\r\n");
      out.write("\t\t\t\tfor(var i in jsonObj.list){\r\n");
      out.write("\t\t\t\t\toutValues += jsonObj.list[i].userid +\r\n");
      out.write("\t\t\t\t\t\", \" + jsonObj.list[i].userpwd +\r\n");
      out.write("\t\t\t\t\t\", \" + decodeURIComponent(jsonObj.list[i].username) +\r\n");
      out.write("\t\t\t\t\t\", \" + jsonObj.list[i].age +\r\n");
      out.write("\t\t\t\t\t\", \" + jsonObj.list[i].email + \r\n");
      out.write("\t\t\t\t\t\", \" + jsonObj.list[i].phone + \"<br>\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t$(\"#d3\").html(outValues);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror: function(request, status, errorData){\r\n");
      out.write("\t\t\t\tconsole.log(\"error code : \" + request.status\r\n");
      out.write("\t\t\t\t\t\t+\"\\nmessage : \" + request.responseText\r\n");
      out.write("\t\t\t\t\t\t+\"\\nerror : \" + errorData);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#test4\").on(\"click\", function(){\r\n");
      out.write("\t\t//컨트롤러에서 Map 객체를 JsonView를 이용해서\r\n");
      out.write("\t\t//내보낸(리턴한) json 객체 출력 처리\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"test4.do\",\r\n");
      out.write("\t\t\ttype: \"post\",\r\n");
      out.write("\t\t\tdataType: \"json\",\r\n");
      out.write("\t\t\tsuccess: function(jsonObj){\r\n");
      out.write("\t\t\t\tconsole.log(jsonObj);\r\n");
      out.write("\t\t\t\t$(\"#d4\").html(\"받은 Map 안의 객체 정보 확인<br>\"\r\n");
      out.write("\t\t\t\t\t\t+ \"이름  : \" + decodeURIComponent(jsonObj.hashMap.samp.name)\r\n");
      out.write("\t\t\t\t\t\t+ \", 나이 : \" + jsonObj.hashMap.samp.age);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror: function(request, status, errorData){\r\n");
      out.write("\t\t\t\tconsole.log(\"error code : \" + request.status\r\n");
      out.write("\t\t\t\t\t\t+\"\\nmessage : \" + request.responseText\r\n");
      out.write("\t\t\t\t\t\t+\"\\nerror : \" + errorData);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#test5\").on(\"click\", function(){\r\n");
      out.write("\t\t//자바스크립트 도는 제이쿼리에서 json 객체 만들어서 컨트롤러로 보내기\r\n");
      out.write("\t\tvar job = new Object();\r\n");
      out.write("\t\tjob.name = \"강감찬\";\r\n");
      out.write("\t\tjob.age = 33;\r\n");
      out.write("\t\t//var job = {name: \"강감찬\", age: 33}\r\n");
      out.write("\t\tconsole.log(\"job : \" + job);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"test5.do\",\r\n");
      out.write("\t\t\ttype: \"post\",\r\n");
      out.write("\t\t\tdata: JSON.stringify(job),\r\n");
      out.write("\t\t\tcontentType: \"application/json; charset=utf-8\",\r\n");
      out.write("\t\t\tsuccess: function(result){\r\n");
      out.write("\t\t\t\t\talert(\"전송 성공 : \" + result);\r\n");
      out.write("\t\t\t\t\t$(\"#d5\").html(\"전송한 json 객체 값 : \" + job.name + \", \" + job.age);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror: function(request, status, errorData){\r\n");
      out.write("\t\t\t\tconsole.log(\"error code : \" + request.status\r\n");
      out.write("\t\t\t\t\t\t+\"\\nmessage : \" + request.responseText\r\n");
      out.write("\t\t\t\t\t\t+\"\\nerror : \" + errorData);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#test6\").on(\"click\", function(){\r\n");
      out.write("\t\t//자바스크립트 또는 제이쿼리에서 jsonArray 객체를 만들어서 컨트롤러로 보내기\r\n");
      out.write("\t\t//var jarr = new Array(5);  => index 사용\r\n");
      out.write("\t\t//var jarr = new Array(); => push() 넣는작업, pop() 꺼내는 작업 사용 \r\n");
      out.write("\t\tvar jarr = [{\"name\": \"일이삼\", \"age\": 123}, {\"name\": \"사오육\", \"age\": 456}, {\"name\": \"칠팔구\", \"age\": 789}];\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"test6.do\",\r\n");
      out.write("\t\t\ttype: \"post\",\r\n");
      out.write("\t\t\tcontentType: \"application/json; charset=utf-8\",\r\n");
      out.write("\t\t\tdata: JSON.stringify(jarr),\r\n");
      out.write("\t\t\tsuccess: function(result){\r\n");
      out.write("\t\t\t\talert(\"전송 성공 : \" + result);\r\n");
      out.write("\t\t\t\tvar values = $(\"#d6\").html();\r\n");
      out.write("\t\t\t\tfor(var i in jarr){\r\n");
      out.write("\t\t\t\t\tvalues += \"이름 : \" + jarr[i].name + \", 나이 : \" + jarr[i].age + \"<br>\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t$(\"#d6\").html(values);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror: function(request, status, errorData){\r\n");
      out.write("\t\t\t\tconsole.log(\"error code : \" + request.status\r\n");
      out.write("\t\t\t\t\t\t+\"\\nmessage : \" + request.responseText\r\n");
      out.write("\t\t\t\t\t\t+\"\\nerror : \" + errorData);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>spring framwork ajax test</h1>\r\n");
      out.write("<ol>\r\n");
      out.write("<li>서버쪽 컨트롤러로 값 보내기 &nbsp;\r\n");
      out.write("<button id=\"test1\">테스트1</button></li>\r\n");
      out.write("<p><div id=\"d1\"></div></p>\r\n");
      out.write("<li>컨트롤러로 부터 json 객체 받아서 출력 &nbsp;\r\n");
      out.write("<button id=\"test2\">테스트2</button></li>\r\n");
      out.write("<p><div id=\"d2\"></div></p>\r\n");
      out.write("<li>컨트롤러로 부터 json 배열 받아서 출력 &nbsp;\r\n");
      out.write("<button id=\"test3\">테스트3</button></li>\r\n");
      out.write("<p><div id=\"d3\"></div></p>\r\n");
      out.write("<li>컨트로러로 부터 맵(Map) 객체 받아서 출력 &nbsp;\r\n");
      out.write("<button id=\"test4\">테스트4</button></li>\r\n");
      out.write("<p><div id=\"d4\"></div></p>\r\n");
      out.write("<li>컨트롤러에 json 객체 보내기 &nbsp;\r\n");
      out.write("<button id=\"test5\">테스트5</button></li>\r\n");
      out.write("<p><div id=\"d5\"></div></p>\r\n");
      out.write("<li>컨트롤러에 json 배열 보내기 &nbsp;\r\n");
      out.write("<button id=\"test6\">테스트6</button></li>\r\n");
      out.write("<p><div id=\"d6\"></div></p>\r\n");
      out.write("</ol>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
